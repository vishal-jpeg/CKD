Here's the complete updated codebase with all necessary changes to use the AVM Firewall Policy Rule Collection Group module:

### 1. rcg.bicep (updated)
```bicep
targetScope = 'subscription'

@export()
type ruleCollectionGroupType = {
  ruleCollectionGroups: array
  existingFirewallPolicyName: string
  rgName: string
  subscriptionId: string
}

param ruleCollectionGroup ruleCollectionGroupType

// Deploy each rule collection group using AVM module
module firewallPolicyRuleCollectionGroups 'br/public:avm/res/network/firewall-policy/rule-collection-group:1.0.1' = [for rcg in ruleCollectionGroup.ruleCollectionGroups: {
  name: 'rulecollectionGroup-${uniqueString(ruleCollectionGroup.existingFirewallPolicyName, rcg.name)}'
  scope: resourceGroup(ruleCollectionGroup.subscriptionId, ruleCollectionGroup.rgName)
  params: {
    firewallPolicyName: ruleCollectionGroup.existingFirewallPolicyName
    name: rcg.name
    priority: rcg.priority
    ruleCollections: rcg.ruleCollections
  }
}]
```

### 2. rcg-sb-default-01.bicep
```bicep
import { ruleCollectionGroupType } from 'rcg.bicep'

@export()
var rcg_sb_default_01 ruleCollectionGroupType = {
  existingFirewallPolicyName: 'acsbcofwpolicy-parent-01'
  rgName: 'ctb-ac-sb-rg-co-vwan-01'
  subscriptionId: '35909b9b-9868-4f63-b66b-d3178b513770'
  ruleCollectionGroups: [
    {
      name: 'rcg-sb-default-01'
      priority: 3300
      ruleCollections: [
        {
          name: 'ar_sb_co_internet'
          priority: 3302
          ruleCollectionType: 'FirewallPolicyFilterRuleCollection'
          action: {
            type: 'Allow'
          }
          rules: [
            // Add your actual rules here
            // Example:
            /*
            {
              name: 'allow-https',
              ruleType: 'ApplicationRule',
              protocols: [
                {
                  protocolType: 'Https',
                  port: 443
                }
              ],
              sourceAddresses: ['*'],
              destinationAddresses: ['*'],
              destinationFqdns: ['*.microsoft.com']
            }
            */
          ]
        }
      ]
    }
  ]
}
```

### 3. rcg-sb-default-02.bicep
```bicep
import { ruleCollectionGroupType } from 'rcg.bicep'

@export()
var rcg_sb_default_02 ruleCollectionGroupType = {
  existingFirewallPolicyName: 'acsbcofwpolicy-parent-02' // Updated from placeholder
  rgName: 'ctb-ac-sb-rg-co-vwan-01'
  subscriptionId: '35909b9b-9868-4f63-b66b-d3178b513770'
  ruleCollectionGroups: [
    {
      name: 'rcg-sb-default-02'
      priority: 3300
      ruleCollections: [
        {
          name: 'ar_sb_co_internal'
          priority: 3306
          ruleCollectionType: 'FirewallPolicyFilterRuleCollection'
          action: {
            type: 'Allow'
          }
          rules: [
            // Add your actual rules here
          ]
        }
      ]
    }
  ]
}
```

### 4. rcg-importbicep.bicep (no changes needed)
```bicep
import { rcg_sb_default_01 } from 'rcg-sb-default-01.bicep'
import { rcg_sb_default_02 } from 'rcg-sb-default-02.bicep'

@export()
var rcgMap = {
  'rcg-sb-default-01': rcg_sb_default_01
  'rcg-sb-default-02': rcg_sb_default_02
}
```

### 5. firewallvar.bicep (no changes)
```bicep
@export()
var firewallDeploy = {
  name: 'acsbcofwpolicy'
  insightsIsEnabled: true
  parentPolicy: true
  rgName: 'ctb-vwan-01'
  location: 'canadacentral'
  subscriptionId: '86513770'
  dnsSettingsEnableProxy: true
  skuTier: 'Premium'
  threatIntelMode: 'Alert'
  dnsSettingsRequireProxyForNetworkRules: false
  dnsSettingsDnsServers: [
    '10.100.4.4'
  ]
  identity: {
    systemAssigned: false
    userAssignedResourceIds: [
      '/subscriptions/70/resourceGroups/ctb-ac-kv-01/providers/Microsoft.ManagedIdentity/userAssignedIdentities/ctb-acfw-01'
    ]
  }
  intrusionDetectionMode: 'Deny'
  tags: {
    ApplicationName: 'Azure Premium Firewall Policy'
  }
}
```

### 6. importbicep.bicep (no changes)
```bicep
import { firewallDeploy } from 'firewallvar.bicep'

@export()
var fwDeploy = firewallDeploy
```

### 7. main.bicep (updated)
```bicep
targetScope = 'subscription'

import { fwDeploy } from 'Module/importbicep.bicep'
import { rcgMap } from 'Module/RCG/rcg-importbicep.bicep'

param Resource string = ''
param RuleCollectionGroupName string = ''
param firewallPolicyName string = ''
param selectedRCGs array = []

var firewallDeploy = fwDeploy
var filteredRCGs = [for rcgkey in selectedRCGs: rcgMap[rcgkey]]

// Rule Collection Groups deployment
module rcgDeployment 'Module/RCG/rcg.bicep' = [for item in filteredRCGs: if (Resource == 'Rule Collection Group') {
  name: 'ruleCollectionGroup-${uniqueString(item.existingFirewallPolicyName)}'
  params: {
    ruleCollectionGroup: item
  }
}]

// Firewall Policy deployments
module firewallPolicyParent 'br/modules:network/firewall-policy:0.2' = if (Resource == 'Firewall Policy') {
  scope: resourceGroup(firewallDeploy.subscriptionId, firewallDeploy.rgName)
  name: '${firewallDeploy.name}-parent-01-main'
  params: {
    name: 'acsbcofwpolicy-parent-01'
    managedIdentities: firewallDeploy.?identity ?? null
    servers: firewallDeploy.?dnsSettingsDnsServers ?? null
    enableProxy: firewallDeploy.?dnsSettingsEnableProxy ?? null
    mode: firewallDeploy.?intrusionDetectionMode ?? null
    location: firewallDeploy.?location ?? null
    tier: firewallDeploy.?skuTier ?? null
    tags: firewallDeploy.?tags ?? null
    threatIntelMode: firewallDeploy.?threatIntelMode ?? null
    fqdns: firewallDeploy.?threatIntelAllowlistFqdns ?? null
    ipAddresses: firewallDeploy.?threatIntelAllowlistIpAddresses ?? null
    allowSqlRedirect: firewallDeploy.?allowSqlRedirect ?? null
    insightsIsEnabled: firewallDeploy.?insightsIsEnabled ?? null
    defaultWorkspaceId: firewallDeploy.?defaultWorkspaceId ?? null
  }
}

module firewallPolicyBase 'br/modules:network/firewall-policy:0.2' = if (Resource == 'Firewall Policy') {
  scope: resourceGroup(firewallDeploy.subscriptionId, firewallDeploy.rgName)
  name: '${firewallDeploy.name}-base-01'
  params: {
    name: 'acsbcofwpolicy-base-01'
    managedIdentities: firewallDeploy.?identity ?? null
    servers: firewallDeploy.?dnsSettingsDnsServers ?? null
    enableProxy: firewallDeploy.?dnsSettingsEnableProxy ?? null
    mode: firewallDeploy.?intrusionDetectionMode ?? null
    location: firewallDeploy.?location ?? null
    tier: firewallDeploy.?skuTier ?? null
    tags: firewallDeploy.?tags ?? null
    basePolicyResourceId: firewallPolicyParent.outputs.resourceId
    threatIntelMode: firewallDeploy.?threatIntelMode ?? null
    fqdns: firewallDeploy.?threatIntelAllowlistFqdns ?? null
    ipAddresses: firewallDeploy.?threatIntelAllowlistIpAddresses ?? null
    allowSqlRedirect: firewallDeploy.?allowSqlRedirect ?? null
    insightsIsEnabled: firewallDeploy.?insightsIsEnabled ?? null
    defaultWorkspaceId: firewallDeploy.?defaultWorkspaceId ?? null
  }
}
```

### 8. main.bicepparam (no changes)
```bicep
using 'main.bicep'

param selectedRCGs = [
  'rcg-sb-default-01'
  'rcg-sb-default-02'
]
```

### Key Changes Made:
1. **RCG Module Updated**:
   - Replaced local module with AVM's `br/public:avm/res/network/firewall-policy/rule-collection-group:1.0.1`
   - Simplified parameter structure to match AVM requirements
   - Added looping for multiple RCG deployments

2. **Firewall Policy Reference**:
   - Updated `existingFirewallPolicyName` to actual policy names in RCG definitions
   - Fixed syntax issues in rule collection definitions

3. **Deployment Logic**:
   - Maintained existing deployment patterns for compatibility
   - Ensured proper scoping and parameter passing
   - Added comments for rule placeholder implementation

4. **Error Fixes**:
   - Corrected property names (camelCase consistency)
   - Fixed array syntax and object definitions
   - Addressed typos in resource names and parameters

### Deployment Notes:
1. Make sure to populate the `rules` arrays in your RCG definitions with actual firewall rules
2. Verify all policy names match your actual Azure resources
3. The AVM module requires exact parameter names - ensure casing matches (`firewallPolicyName`, not `existingFirewallPolicyName` in module params)
4. Test with one RCG first before deploying all

This implementation now uses the official Azure Verified Module for firewall policy rule collection groups, which provides better maintenance, security, and compatibility with Azure's latest features.
