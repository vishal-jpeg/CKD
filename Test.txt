Got it! If your main.bicep file contains both firewall policies and rule collection groups (RCGs), and you want to select and deploy only the RCG(s) based on the runtime input (while keeping both resources in the same template), we can adjust the logic accordingly.

Here’s how you can handle this:


---

✅ Step 1: Add Parameters in Azure DevOps YAML

We will still prompt for RCG selection using parameters in the YAML, and if "All" is selected, we will deploy all rule collection groups and associated firewall policies. If a specific RCG is selected, we deploy just that specific RCG and its firewall policy.

parameters:
  - name: RCGtoDeploy
    displayName: 'Select Rule Collection Group to Deploy'
    type: string
    default: 'All'
    values:
      - All
      - rcgsbdefault01
      - rcgsbdefault02


---

✅ Step 2: Update main.bicep to Filter Based on RCG Selection

Bicep: Define Parameters for RCG Selection

In main.bicep, you will define a parameter for the RCG selection. If "All" is selected, you deploy all RCGs. If a specific RCG is selected, only that RCG and its associated firewall policies will be deployed.

@allowed([
  'All'
  'rcgsbdefault01'
  'rcgsbdefault02'
])
param RCGName string = 'All'

@allowed([
  'firewallPolicy01'
  'firewallPolicy02'
])
param FirewallPolicyName string = 'All'

var selectedRCGs = RCGName == 'All' ? firewallPoliciesDeploy : [
  for rcg in firewallPoliciesDeploy: if (RCGName == rcg.ruleCollectionGroups[0].name) {
    rcg
  }
]

var selectedFirewallPolicy = FirewallPolicyName == 'All' ? firewallPoliciesDeploy : [
  for policy in firewallPoliciesDeploy: if (FirewallPolicyName == policy.existingFirewallPolicyName) {
    policy
  }
]

Step 3: Update Deployment Logic to Deploy Both RCGs and Firewall Policies

Since both firewall policies and RCGs are part of the same template, you should first deploy the firewall policy and then deploy the rule collection groups associated with the selected firewall policy. The logic will check if the selected RCG or firewall policy is part of the filtered list and deploy only those that match.

Here is how you can structure your Bicep file:

// Deploy selected firewall policy first
module firewallPolicyDeploy 'Module/Firewall/firewallPolicy.bicep' = [
  for policy in selectedFirewallPolicy: {
    name: 'firewallPolicy-${policy.existingFirewallPolicyName}'
    params: {
      existingFirewallPolicyName: policy.existingFirewallPolicyName
      rgName: policy.rgName
      subscriptionId: policy.subscriptionId
    }
  }
]

// Deploy the selected rule collection groups
module firewallPolicyRuleCollectionGroups 'Module/RCG/firewallPolicies-ruleCollectionGroups.bicep' = [
  for rulecollectionGroup in selectedRCGs: {
    name: 'ruleCollectionGroup-${uniqueString(rulecollectionGroup.existingFirewallPolicyName, rulecollectionGroup.ruleCollectionGroups[0].name)}'
    dependsOn: [
      firewallPolicyDeploy
    ]
    params: {
      existingFirewallPolicyName: rulecollectionGroup.existingFirewallPolicyName
      ruleCollectionGroups: rulecollectionGroup.ruleCollectionGroups
      rgName: rulecollectionGroup.rgName
      subscriptionId: rulecollectionGroup.subscriptionId
    }
  }
]


---

Step 4: Modify Azure DevOps Pipeline to Pass Parameters for Firewall and RCG

Now, update your Azure DevOps pipeline to pass both RCG and Firewall Policy parameters. Depending on the selected RCG, this will deploy the corresponding resources.

- task: AzureCLI@2
  inputs:
    azureSubscription: 'YourServiceConnection'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az deployment sub create \
        --location 'eastus' \
        --template-file 'main.bicep' \
        --parameters RCGName=${{ parameters.RCGtoDeploy }} \
        --parameters FirewallPolicyName=${{ parameters.FirewallPolicyName }}


---

Explanation:

RCGName: If you choose "All," the deployment will trigger all RCGs. If you choose a specific RCG like rcgsbdefault01, only that RCG will be deployed.

FirewallPolicyName: Similar to the RCG, this controls which firewall policies are deployed. "All" will deploy all policies, but selecting a specific policy will limit the deployment to that policy.

Filtering Logic: The selectedRCGs and selectedFirewallPolicy arrays ensure only the required resources are deployed based on your pipeline parameters.



---

✅ Optional Extension: Multi-Select Support (for both RCG and Firewall)

If you want to allow the selection of multiple RCGs or firewall policies at runtime, you can modify the parameters to accept an array (multi-select).


---

Summary:

You can use Azure DevOps runtime parameters to allow users to select which RCG and Firewall Policy to deploy at runtime.

The main.bicep file is modified to filter the selected RCGs and Firewall Policies based on the parameters passed by the Azure DevOps pipeline.



---

Does this approach work for you? If you need multi-select support, I can help you with that too!

trigger: none

name: Deploy-Bicep-Files-$(Build.BuildId)

parameters:
  - name: runValidation
    displayName: "Run Validation and Scan"
    type: boolean
    default: true

  - name: templateFileDirectory
    displayName: "Template File Directory"
    type: string
    default: './CTB/TemplateFiles'

  - name: RCGtoDeploy
    displayName: "Select Rule Collection Group to Deploy"
    type: string
    default: 'All'
    values:
      - All
      - rcgsbdefault01
      - rcgsbdefault02

variables:
  azureServiceConnection: 'ctb-ac-sb-connect'
  location: 'canadacentral'
  templateFile: './CTB/canada_central/common_services/common/Connect/Sandbox/Firewall/main.bicep'
  parameterFile: './CTB/canada_central/common_services/common/Connect/Sandbox/Firewall/main.bicepparam'

pool:
  name: Merchantss

stages:
  - stage: Lint
    displayName: Lint and Validate
    jobs:
      - job: LintCode
        displayName: Run Bicep Linter
        steps:
          - script: |
              az bicep build --file $(templateFile) --outdir ${{ parameters.templateFileDirectory }}/JsonFilesForScan
              dir ${{ parameters.templateFileDirectory }}/JsonFilesForScan
            displayName: Run Bicep Linter

  - stage: Validation
    displayName: Preflight Validation
    condition: eq(${{ parameters.runValidation }}, true)
    jobs:
      - job: RunValidation
        displayName: Preflight Template Validation
        steps:
          - task: AzureCLI@2
            name: RunPreflightValidation
            displayName: Run preflight validation
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az deployment sub validate \
                  --location $(location) \
                  --template-file $(templateFile) \
                  --parameters $(parameterFile) \
                  --parameters RCGName=${{ parameters.RCGtoDeploy }}

  - stage: WhatIf
    displayName: Preview (What-If)
    condition: eq(${{ parameters.runValidation }}, true)
    jobs:
      - job: PreviewJob
        displayName: Deployment Preview
        steps:
          - task: AzureCLI@2
            name: Preview
            displayName: Run Preview
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az deployment sub what-if \
                  --location $(location) \
                  --template-file $(templateFile) \
                  --parameters $(parameterFile) \
                  --parameters RCGName=${{ parameters.RCGtoDeploy }}

