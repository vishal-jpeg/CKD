# Service principal credentials provided as environment variables.
$tenantId    = $env:TenantId      # e.g. "your-tenant-id"
$clientId    = $env:ClientId      # e.g. "your-client-id"
$clientSecret= $env:ClientSecret  # e.g. "your-client-secret"

# Convert client secret to a secure string and create PSCredential.
$secureClientSecret = ConvertTo-SecureString $clientSecret -AsPlainText -Force
$spCredential = New-Object System.Management.Automation.PSCredential($clientId, $secureClientSecret)

# Connect to Azure using the service principal.
Connect-AzAccount -ServicePrincipal -Tenant $tenantId -Credential $spCredential

# Retrieve an access token for the Azure Management endpoint.
$accessToken = (Get-AzAccessToken -ResourceUrl "https://management.azure.com/").Token

# Build the headers to include the token.
$headers = @{
    "Authorization" = "Bearer $accessToken"
    "Content-Type"  = "application/json"
}

# Define the scope. For example, to target a subscription use:
$scope = "/subscriptions/<subscription-id>"  # Replace with your actual subscription ID or scope.

# -------------------------------
# GET: List Role Management Policies
# -------------------------------
# Set your filter as needed (for example, to filter on display name).
$filter   = "YOUR_FILTER_HERE"  # Replace with your actual filter criteria
$apiVersion = "2020-10-01"

# Note: Escape the $ in $filter in the URI with a backtick (`$)
$getUri = "https://management.azure.com$($scope)/providers/Microsoft.Authorization/roleManagementPolicies?api-version=$apiVersion&`$filter=$filter"

# Send the GET request
$getResponse = Invoke-RestMethod -Method GET -Uri $getUri -Headers $headers

# Output the GET response (which should include the policy objects and their IDs)
$getResponse

# -------------------------------
# PATCH: Update a Specific Role Management Policy
# -------------------------------
# Replace with the actual policy ID you wish to update, as returned in the GET response.
$roleManagementPolicyId = "YOUR_POLICY_ID"  # For example, "policy-12345"
$patchUri = "https://management.azure.com$($scope)/providers/Microsoft.Authorization/roleManagementPolicies/$roleManagementPolicyId?api-version=$apiVersion"

# Build the JSON body with the updated properties.
# Adjust the properties object as needed.
$patchBody = @{
    properties = @{
        displayName = "Updated Policy Name"
        # Add or update other properties as needed.
    }
} | ConvertTo-Json -Depth 10

# Send the PATCH request
$patchResponse = Invoke-RestMethod -Method PATCH -Uri $patchUri -Headers $headers -Body $patchBody

# Output the PATCH response
$patchResponse
