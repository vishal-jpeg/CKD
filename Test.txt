param (
    [string]$AzureDevOpsOrgUrl = "https://dev.azure.com/your-org",  # <-- Update your org URL
    [string]$ServiceAccountUsername = "your-service-account@domain.com",  # <-- Update this
    [string]$KeyVaultName = "your-keyvault-name",  # <-- Update this
    [string]$SecretName = "PATRotation"  # <-- This is the name of the secret in Key Vault
)

# Retrieve encrypted password stored in Azure Automation variable
$ServiceAccountPassword = Get-AutomationVariable -Name "PATUserPassword"

if (-not $ServiceAccountPassword) {
    throw "Service account password is missing or variable is not accessible."
}

# Authenticate to Azure using the Runbook's Managed Identity
Connect-AzAccount -Identity
Write-Output "Authenticated to Azure using Managed Identity."

# Prepare PAT creation request body
$body = @{
    displayName = "automation-pat"
    scope       = "vso.build vso.code"  # <-- Adjust scopes as needed
    validTo     = (Get-Date).AddDays(30).ToString("o")
    allOrgs     = $false
}

# Encode credentials to base64 for Basic Authentication
$pair = "$ServiceAccountUsername:$ServiceAccountPassword"
$encodedAuth = [Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($pair))

# Prepare headers
$headers = @{
    Authorization = "Basic $encodedAuth"
    "Content-Type" = "application/json"
}

# Call Azure DevOps REST API to create a PAT
try {
    Write-Output "Calling Azure DevOps API to generate PAT..."
    $response = Invoke-RestMethod -Method Post `
        -Uri "$AzureDevOpsOrgUrl/_apis/tokens/pats?api-version=7.0" `
        -Headers $headers `
        -Body ($body | ConvertTo-Json -Depth 10)

    $newPat = $response.patToken
    if (-not $newPat) {
        throw "PAT was not generated. Response did not contain 'patToken'."
    }

    Write-Output "New PAT generated successfully."

} catch {
    throw "Failed to generate PAT via API. Error: $($_.Exception.Message)"
}

# Store the PAT securely in Azure Key Vault
try {
    Write-Output "Storing new PAT in Azure Key Vault..."
    Set-AzKeyVaultSecret -VaultName $KeyVaultName `
        -Name $SecretName `
        -SecretValue (ConvertTo-SecureString $newPat -AsPlainText -Force)
    Write-Output "PAT stored successfully in Key Vault under secret name: $SecretName"
} catch {
    throw "Failed to store PAT in Key Vault. Error: $($_.Exception.Message)"
}
