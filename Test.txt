Import-Module Microsoft.Graph.Identity.SignIns

# Replace with your subscription ID
$subscriptionId = "YOUR_SUBSCRIPTION_ID"
$scope = "/subscriptions/$subscriptionId"

try {
    # Get the policy ID for the specific subscription
    $policy = Get-MgPolicyRoleManagementPolicy | Where-Object { $_.ScopeId -eq $scope }

    if ($policy) {
        $unifiedRoleManagementPolicyId = $policy.Id

        # Get the rule for the Reader role
        $rule = Get-MgPolicyRoleManagementPolicyRule -UnifiedRoleManagementPolicyId $unifiedRoleManagementPolicyId | Where-Object { $_.Target.Caller -eq "acdd72a7-3385-48ef-bd42-f606fba81ae7" -and $_.Target.Level -eq "Eligibility" }

        if ($rule) {
            $unifiedRoleManagementPolicyRuleId = $rule.Id

            # Now, update the rule (as in the previous response)
            $params = @{
                "@odata.type" = "#microsoft.graph.unifiedRoleManagementPolicyExpirationRule"
                id = $unifiedRoleManagementPolicyRuleId
                isExpirationRequired = $false
                target = @{
                    "@odata.type" = "microsoft.graph.unifiedRoleManagementPolicyRuleTarget"
                    caller = "acdd72a7-3385-48ef-bd42-f606fba81ae7"
                    operations = @(
                        "All"
                    )
                    level = "Eligibility"
                    inheritableSettings = @(
                    )
                    enforcedSettings = @(
                    )
                }
            }

            Update-MgPolicyRoleManagementPolicyRule -UnifiedRoleManagementPolicyId $unifiedRoleManagementPolicyId -UnifiedRoleManagementPolicyRuleId $unifiedRoleManagementPolicyRuleId -BodyParameter $params

            Write-Host "Expiration for Reader role eligibility in subscription '$subscriptionId' successfully updated."
        } else {
            Write-Host "Rule for Reader role eligibility not found in subscription '$subscriptionId'."
        }
    } else {
        Write-Host "Policy for subscription '$subscriptionId' not found."
    }
}
catch {
    Write-Host "Error updating expiration:"
    Write-Host $_.Exception.Message
}

