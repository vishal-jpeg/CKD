trigger:
- main

pool:
  vmImage: 'windows-latest'

steps:
  - task: AzurePowerShell@5
    inputs:
      # This is the name of your existing Azure RM service connection
      azureSubscription: 'MyAzureServiceConnection'

      # We will run an inline script
      ScriptType: 'InlineScript'

      # Our script code goes here
      Inline: |
        # You should already be logged in via the Azure service connection,
        # so you can retrieve the access token directly:

        $accessToken = (Get-AzAccessToken -ResourceUrl "https://management.azure.com").Token

        $headers = @{
            "Authorization" = "Bearer $accessToken"
            "Content-Type"  = "application/json"
        }

        # Replace with your subscription or resource scope
        $scope = "/subscriptions/$(SubscriptionId)"

        # Optional filter if needed
        $filter = "YOUR_FILTER_HERE"
        $apiVersion = "2020-10-01"

        Write-Host "Running GET request to list role management policies..."

        $getUri = "https://management.azure.com$($scope)/providers/Microsoft.Authorization/roleManagementPolicies?api-version=$apiVersion&`$filter=$filter"
        $getResponse = Invoke-RestMethod -Method GET -Uri $getUri -Headers $headers

        Write-Host "GET response:"
        $getResponse

        # Example: pick a policy ID from the response
        # (In reality, parse $getResponse to find the policy ID you want to update)
        $roleManagementPolicyId = "YOUR_POLICY_ID"

        Write-Host "Patching policy ID: $roleManagementPolicyId"

        $patchUri = "https://management.azure.com$($scope)/providers/Microsoft.Authorization/roleManagementPolicies/$roleManagementPolicyId?api-version=$apiVersion"

        # Build the JSON body with the updated properties
        $patchBody = @{
            properties = @{
                displayName = "Updated Policy Name"
                # Add or update other properties as needed
            }
        } | ConvertTo-Json -Depth 10

        $patchResponse = Invoke-RestMethod -Method PATCH -Uri $patchUri -Headers $headers -Body $patchBody
        Write-Host "PATCH response:"
        $patchResponse

    # Use the latest installed version of Azure PowerShell
    azurePowerShellVersion: 'LatestVersion'
