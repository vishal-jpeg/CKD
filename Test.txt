# ------------------------
# CONFIGURATION SECTION
# ------------------------

$org = "https://dev.azure.com/cantirebank/"
$namespaceId = "2e9eb7ed-3c0a-47d4-87c1-0ffdd275fd87"  # Azure Repos Git
$projectId = $ProjectDetails.id  # Get via `az devops project show`
$repoId = $repold                # Get via `az repos show`
$token = "repoV2/$projectId/$repoId"  # Target resource
$subject = $groupDescriptor     # AAD or ADO group descriptor (vssgp.xxx)

# Permissions to audit
$permissionsToCheck = @(
    "Advanced Security: manage and dismiss alerts",
    "Advanced Security: manage settings",
    "Advanced Security: view alerts",
    "Read"
)

# Known inherited mappings (manual fallback)
$inheritanceMap = @{
    "Advanced Security: view alerts" = "Repository Security Readers"
    "Read" = "Repository Security Readers"
}

# ------------------------
# FETCH PERMISSIONS
# ------------------------

Write-Host "üîç Fetching permissions for subject: $subject"
$jsonText = az devops security permission show `
    --namespace-id  $namespaceId `
    --subject       $subject `
    --token         $token `
    --organization  $org `
    --output        json

if (!$jsonText) {
    Write-Error "‚ùå No permission data returned. Check subject or token values."
    exit 1
}

$allPermissions = $jsonText | ConvertFrom-Json

# ------------------------
# DEBUG: Print all returned permissions
# ------------------------

Write-Host "`nüìã All permissions returned by Azure CLI:"
$allPermissions | Format-Table permissionDisplayName, allow, deny

# ------------------------
# AUDIT EACH TARGET PERMISSION
# ------------------------

foreach ($permName in $permissionsToCheck) {
    Write-Host "`nüîé Auditing permission: $permName"

    $match = $allPermissions | Where-Object { $_.permissionDisplayName -eq $permName }

    if ($match) {
        if ($match.allow -gt 0) {
            Write-Host "  ‚úÖ [$permName] is EXPLICITLY ALLOWED (Allow = $($match.allow))"
        } elseif ($match.deny -gt 0) {
            Write-Host "  üö´ [$permName] is EXPLICITLY DENIED (Deny = $($match.deny))"
        } else {
            Write-Host "  ‚ö†Ô∏è [$permName] exists but not explicitly allowed or denied"
        }
    }
    elseif ($inheritanceMap.ContainsKey($permName)) {
        $viaGroup = $inheritanceMap[$permName]
        Write-Host "  üì• [$permName] is INHERITED via [$viaGroup]"
    }
    else {
        Write-Host "  ‚ùå [$permName] is NOT SET and not known to be inherited"
    }
}
