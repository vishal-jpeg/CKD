targetScope = 'subscription'

@export()
type ruleCollectionGroupType = {
  existingFirewallPolicyName: string
  rgName: string
  subscriptionId: string
  ruleCollectionGroups: {
    name: string
    priority: int
    ruleCollections: {
      name: string
      priority: int
      ruleCollectionType: string
      action: {
        type: string
      }
      rules: {
        name: string
        ruleType: string
        description?: string
        ipProtocols?: string[]  // Changed to array
        sourceAddresses?: string[]
        sourceIpGroups?: string[]  // Fixed casing
        destinationAddresses?: string[]
        destinationIpGroups?: string[]  // Fixed casing
        destinationPorts?: string[]
        destinationFqdns?: string[]
        fqdnTags?: string[]
        protocols?: {  // Added for application rules
          port: int
          protocolType: string
        }[]
        translatedAddress?: string  // For NAT rules
        translatedPort?: string     // For NAT rules
      }[]
    }[]
  }[]
}

param ruleCollectionGroup ruleCollectionGroupType

module firewallPolicyRuleCollectionGroups 'br/public:avm/res/network/firewall-policy/rule-collection-group:1.0.1' = [for rcg in ruleCollectionGroup.ruleCollectionGroups: {
  name: 'rulecollectionGroup-${uniqueString(ruleCollectionGroup.existingFirewallPolicyName, rcg.name)}'
  scope: resourceGroup(ruleCollectionGroup.subscriptionId, ruleCollectionGroup.rgName)
  params: {
    firewallPolicyName: ruleCollectionGroup.existingFirewallPolicyName
    name: rcg.name
    priority: rcg.priority
    ruleCollections: rcg.ruleCollections  // Correct property name
  }
}]
