trigger:
- main

pool:
  vmImage: 'windows-latest'

steps:
  - task: AzurePowerShell@5
    inputs:
      azureSubscription: 'MyAzureServiceConnection'
      ScriptType: 'InlineScript'
      Inline: |
        $accessToken = (Get-AzAccessToken -ResourceUrl "https://management.azure.com").Token
        $headers = @{
            "Authorization" = "Bearer $accessToken"
            "Content-Type"  = "application/json"
        }
        $scope = "/subscriptions/$(SubscriptionId)"
        $filter = "YOUR_FILTER_HERE"
        $apiVersion = "2020-10-01"
        Write-Host "Running GET request to list role management policies..."
        $getUri = "https://management.azure.com$($scope)/providers/Microsoft.Authorization/roleManagementPolicies?api-version=$apiVersion&`$filter=$filter"
        $getResponse = Invoke-RestMethod -Method GET -Uri $getUri -Headers $headers
        Write-Host "GET response:"
        $getResponse

        # Replace with the actual policy ID from the GET response.
        $roleManagementPolicyId = "YOUR_POLICY_ID"
        Write-Host "Patching policy ID: $roleManagementPolicyId"

        $patchUri = "https://management.azure.com$($scope)/providers/Microsoft.Authorization/roleManagementPolicies/$roleManagementPolicyId?api-version=$apiVersion"

        # ***** CHANGES MADE BELOW *****
        # Added roleAssignmentRequestPolicy with isExpirationRequired set to false to make the expiration rule permanent.
        $patchBody = @{
            properties = @{
                displayName = "Updated Policy Name"
                roleAssignmentRequestPolicy = @{
                    isExpirationRequired = $false
                }
            }
        } | ConvertTo-Json -Depth 10
        # ***** END OF CHANGES *****

        $patchResponse = Invoke-RestMethod -Method PATCH -Uri $patchUri -Headers $headers -Body $patchBody
        Write-Host "PATCH response:"
        $patchResponse
