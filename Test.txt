Here‚Äôs a revised snippet for your foreach loop that

1. Drops the unsupported -Depth parameter on ConvertFrom-Json


2. Captures the JSON from your CLI call once per permission


3. Prints whether each permission is set (you can adapt the condition to suit your exact check)



# Array of permission names to audit
$permissionsToCheck = @(
    "Advanced Security: manage and dismiss alerts",
    "Advanced Security: manage settings",
    "Advanced Security: view alerts",
    "Read"
)

# Pre-define the namespace ID, repo token, group descriptor, etc.
$namespaceId    = "2e9eb7ed-3c0a-47d4-87c1-0ffdd275fd87"
$repoToken      = "repoV2/$($ProjectDetails.id)/$repold"    # your repo token
$subject        = $groupDescriptor                          # your group descriptor

foreach ($permissionName in $permissionsToCheck) {
    Write-Host "Checking permission: $permissionName"
    
    # Call the CLI once for this permission
    $jsonText = az devops security permission show `
        --namespace-id  $namespaceId `
        --subject       $subject `
        --token         $repoToken `
        --permission    $permissionName `
        --organization  $org `
        --output        json

    # Convert to an object (no -Depth on Windows PowerShell)
    $permObj = $jsonText | ConvertFrom-Json

    # permObj will typically have properties like allow/deny/namespaceId/permissionDisplayName
    if ($permObj.allow -gt 0) {
        Write-Host "  ‚úÖ [$permissionName] is ALLOWED (allow = $($permObj.allow))"
    }
    elseif ($permObj.deny -gt 0) {
        Write-Host "  üö´ [$permissionName] is DENIED (deny = $($permObj.deny))"
    }
    else {
        Write-Host "  ‚ö†Ô∏è  [$permissionName] is NOT SET"
    }
}

What changed

Removed the -Depth parameter on ConvertFrom-Json (that switch isn‚Äôt available in Windows PowerShell).

Pulled the az devops security permission show call into the loop so each permission is queried once.

Captured the raw JSON as $jsonText, then piped it into ConvertFrom-Json.

Inspected the resulting object‚Äôs .allow and .deny fields to determine if the permission is set.


You can redirect the Write-Host output to a CSV later (e.g. piping into Export-Csv) once you‚Äôve validated that this prints correctly. Let me know if you need the CSV export stub added next!

