targetScope = 'subscription'

// Import configurations
import * as fw from 'Module/importbicep.bicep'
import * as rcg from 'Module/RCG/rcg-importbicep.bicep'

// Parameters
@description('Resource type to deploy')
param Resource string = 'Rule Collection Group'

@description('Selected RCGs when deploying individually')
param selectedRCGs array = []

@description('Firewall policy configuration')
param firewallPolicyName string = ''
param RuleCollectionGroupName string = ''

// Prepare deployment data
var firewallDeploy = [...fw.fwDeploy]
var allRCGKeys = keys(rcg.rcgMap)
var filteredRCGs = [for rcgKey in selectedRCGs : rcg.rcgMap[rcgKey]]
var effectiveRCGs = (Resource == 'Firewall Policy') ? allRCGKeys : selectedRCGs

// Firewall Policy Deployment (Parent)
module firewallPolicyParent '../../../Modules/Network/firewallPolicies.bicep' = [for (firewallPolicy, i) in firewallDeploy: if (Resource == 'Firewall Policy') {
  scope: resourceGroup(firewallPolicy.subscriptionId, firewallPolicy.rgName)
  name: '${firewallPolicy.name}-parent-01-main-${i}'
  params: {
    name: 'acsbcofwpolicy-parent-01'
    identity: firewallPolicy.identity ?? null
    dnsSettings: {
      dnsServers: firewallPolicy.dnsSettingsDnsServers ?? null
      enableProxy: firewallPolicy.dnsSettingsEnableProxy ?? null
      requireProxyForNetworkRules: firewallPolicy.dnsSettingsRequireProxyForNetworkRules ?? null
    }
    intrusionDetectionMode: firewallPolicy.intrusionDetectionMode ?? null
    location: firewallPolicy.location ?? null
    skuTier: firewallPolicy.skuTier ?? null
    tags: firewallPolicy.tags ?? null
    threatIntelMode: firewallPolicy.threatIntelMode ?? null
    threatIntelAllowlist: {
      fqdns: firewallPolicy.threatIntelAllowlistFqdns ?? null
      ipAddresses: firewallPolicy.threatIntelAllowlistIpAddresses ?? null
    }
    allowSqlRedirect: firewallPolicy.allowSqlRedirect ?? null
    insights: {
      isEnabled: firewallPolicy.insightsIsEnabled ?? null
      defaultWorkspaceId: firewallPolicy.defaultWorkspaceId ?? null
    }
  }
}]

// Firewall Policy Deployment (Base)
module firewallPolicyBase '../../../Modules/Network/firewallPolicies.bicep' = [for (firewallPolicy, i) in firewallDeploy: if (Resource == 'Firewall Policy') {
  scope: resourceGroup(firewallPolicy.subscriptionId, firewallPolicy.rgName)
  name: '${firewallPolicy.name}-base-01-${i}'
  params: {
    name: 'acsbcofwpolicy-base-01'
    identity: firewallPolicy.identity ?? null
    dnsSettings: {
      dnsServers: firewallPolicy.dnsSettingsDnsServers ?? null
      enableProxy: firewallPolicy.dnsSettingsEnableProxy ?? null
      requireProxyForNetworkRules: firewallPolicy.dnsSettingsRequireProxyForNetworkRules ?? null
    }
    parentPolicy: {
      id: firewallPolicyParent[i].outputs.parentPolicyId
    }
    intrusionDetectionMode: firewallPolicy.intrusionDetectionMode ?? null
    location: firewallPolicy.location ?? null
    skuTier: firewallPolicy.skuTier ?? null
    tags: firewallPolicy.tags ?? null
    threatIntelMode: firewallPolicy.threatIntelMode ?? null
    threatIntelAllowlist: {
      fqdns: firewallPolicy.threatIntelAllowlistFqdns ?? null
      ipAddresses: firewallPolicy.threatIntelAllowlistIpAddresses ?? null
    }
    allowSqlRedirect: firewallPolicy.allowSqlRedirect ?? null
    insights: {
      isEnabled: firewallPolicy.insightsIsEnabled ?? null
      defaultWorkspaceId: firewallPolicy.defaultWorkspaceId ?? null
    }
  }
}]

// RCG Deployment
module firewallPolicyRuleCollectionGroups 'Module/RCG/rcg.bicep' = [for (rcgKey, i) in effectiveRCGs: {
  name: 'ruleCollectionGroup-${uniqueString(rcgKey)}-${i}'
  params: {
    rulecollectionGroup: {
      existingFirewallPolicyName: rcg.rcgMap[rcgKey].existingFirewallPolicyName
      ruleCollectionGroups: rcg.rcgMap[rcgKey].ruleCollectionGroups
      rgName: rcg.rcgMap[rcgKey].rgName
      subscriptionId: rcg.rcgMap[rcgKey].subscriptionId
    }
  }
  dependsOn: Resource == 'Firewall Policy' ? [firewallPolicyBase] : []
}]

// Outputs
output deployedFirewalls array = [for deployment in firewallPolicyBase: deployment.properties]
output deployedRCGs array = [for deployment in firewallPolicyRuleCollectionGroups: deployment.properties]
