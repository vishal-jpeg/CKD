# ————————————————————————————————
# CONFIGURATION
# Path to your CSV (must have headers: Scope, principalName, roleName)
$CsvPath = 'C:\path\to\assignments.csv'

# Defaults for any missing columns (since CSV only has 3)
# You can tweak these or prompt for them instead
$DefaultDuration      = 'P1D'                         # ISO8601 duration (e.g. 'P1D' = 1 day)
$DefaultJustification = 'Automated assignment script' 

# ————————————————————————————————
# IMPORT
$entries = Import-Csv -Path $CsvPath

foreach ($entry in $entries) {
    $AssignmentScope = $entry.Scope
    $principalName   = $entry.principalName
    $roleName        = $entry.roleName

    # ————————————————————————————————
    # 1. Resolve Principal (user or group) → PrincipalId
    $principal = Get-AzADUser  -UserPrincipalName $principalName -ErrorAction SilentlyContinue
    if (-not $principal) {
        $principal = Get-AzADGroup -DisplayName        $principalName -ErrorAction SilentlyContinue
    }
    if (-not $principal) {
        Write-Warning "Cannot find a user or group named '$principalName'; skipping."
        continue
    }
    $PrincipalId = $principal.Id

    # ————————————————————————————————
    # 2. Resolve Role → RoleDefinitionId
    #    Match either the built-in RoleName or DisplayName
    $roleDef = Get-AzRoleDefinition |
        Where-Object { $_.RoleName    -eq $roleName -or
                       $_.DisplayName -eq $roleName }
    if (-not $roleDef) {
        Write-Warning "No role with name/displayName '$roleName'; skipping."
        continue
    }
    $RoleDefinitionId = $roleDef.Id

    # ————————————————————————————————
    # 3. Check for existing eligibility request
    $filter       = "principalId eq '$PrincipalId'"
    $allSchedules = Get-AzRoleEligibilityScheduleRequest `
        -Scope  $AssignmentScope `
        -Filter $filter `
        -ErrorAction SilentlyContinue

    $already = $allSchedules |
        Where-Object {
            $_.RoleDefinitionId -eq $RoleDefinitionId -and
            $_.Scope            -eq $AssignmentScope
        }

    if ($already) {
        Write-Host "Skipping—eligibility already exists for $principalName @ $AssignmentScope"
        continue
    }

    # ————————————————————————————————
    # 4. Create a new eligibility request
    $Guid      = [Guid]::NewGuid().ToString()
    $StartTime = (Get-Date).ToString('o')

    New-AzRoleEligibilityScheduleRequest `
        -Name                      $Guid `
        -Scope                     $AssignmentScope `
        -PrincipalId               $PrincipalId `
        -RoleDefinitionId          $RoleDefinitionId `
        -RequestType               AdminAssign `
        -ScheduleInfoStartDateTime $StartTime `
        -Duration                  $DefaultDuration `
        -Justification             $DefaultJustification

    Write-Host "Created eligibility for $principalName → '$roleName' @ $AssignmentScope"
}
