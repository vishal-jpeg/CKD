Parameters - update these in Automation Account or pass at runtime

param ( [string]$AzureDevOpsOrgUrl = "https://dev.azure.com/your-org", [string]$KeyVaultName = "your-keyvault-name", [string]$SecretName = "PAT-Token", [string]$ServiceAccountUPN = "your-serviceaccount@domain.com" )

Authenticate to Azure using Managed Identity

Write-Output "Authenticating to Azure using Managed Identity..." Connect-AzAccount -Identity

Get current PAT from Azure Key Vault

Write-Output "Fetching current PAT from Key Vault..." $currentPAT = (Get-AzKeyVaultSecret -VaultName $KeyVaultName -Name $SecretName).SecretValueText

Prepare Auth Header

$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("":$currentPAT")) $headers = @{ Authorization = ("Basic {0}" -f $base64AuthInfo) }

Build PAT request body

Write-Output "Building request for new PAT..." $body = { displayName = "Auto-Rotated-PAT" scope       = "vso.build vso.code" validTo     = (Get-Date).AddDays(30).ToString("o") allOrgs     = $false targetAccounts = @() onlyWithinCurrentAccount = $true isPublic = $false userId = "" userPrincipalName = $ServiceAccountUPN } | ConvertTo-Json -Depth 10

Make the REST API call to rotate PAT

Write-Output "Calling Azure DevOps API to generate new PAT..." $response = Invoke-RestMethod -Method Post -Uri "$AzureDevOpsOrgUrl/_apis/tokens/pats?api-version=7.1-preview.1" -Headers $headers -Body $body -ContentType "application/json"

$newPat = $response.patToken

if (-not $newPat) { throw "Failed to retrieve new PAT. Response: $($response | ConvertTo-Json -Depth 5)" }

Store the new PAT in Key Vault

Write-Output "Storing new PAT in Key Vault..." Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name $SecretName -SecretValue (ConvertTo-SecureString $newPat -AsPlainText -Force)

Write-Output "PAT rotation completed successfully."

