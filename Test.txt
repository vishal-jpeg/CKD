$csvPath = "/agent/_work/1/s/CTB/TemplateFiles/CSVS/PIM.csv"
$entries = Import-Csv -Path $csvPath

foreach ($entry in $entries) {
    $Scope           = $entry.Scope
    $AssignmentScope = $entry.AssignmentScope
    $StartTime       = Get-Date -Format o

    # ─── 1) RESOLVE ROLE DEFINITION ID ────────────────────────────────────────────
    $roleName = $entry.RoleDefinition
    # Try by built-in Name first; if that fails, look up by DisplayName
    try {
        $roleObj = Get-AzRoleDefinition -Name $roleName -ErrorAction Stop
    }
    catch {
        $roleObj = Get-AzRoleDefinition -Filter "properties/displayName eq '$roleName'" -ErrorAction Stop
    }
    $RoleDefinitionId = $roleObj.Id

    # ─── 2) RESOLVE PRINCIPAL ID ──────────────────────────────────────────────────
    $principalName = $entry.Principal
    # Try user by UPN or displayName
    $adUser = Get-AzADUser -Filter "userPrincipalName eq '$principalName' or displayName eq '$principalName'" `
              -ErrorAction SilentlyContinue
    if ($adUser) {
        $PrincipalId = $adUser.Id
    }
    else {
        # Fallback to group by displayName
        $adGroup = Get-AzADGroup -Filter "displayName eq '$principalName'" -ErrorAction Stop
        $PrincipalId = $adGroup.Id
    }

    # ─── 3) UPDATE ROLE MANAGEMENT POLICY ─────────────────────────────────────────
    $GetPolicy = Get-AzRoleManagementPolicyAssignment -Scope $Scope `
                   | Where-Object Name -like "*$($entry.RoleId)"
    $PolicyId  = ($GetPolicy.PolicyId -split "/")[-1]

    # (re-use your existing rule objects here…)
    $AllRules = [Microsoft.Azure.PowerShell.Cmdlets.Resources.Authorization.Models.Api20201001Preview.IRoleManagementPolicyRule[]]@(
        $ExpirationRuleAdminEligible,
        $ExpirationRuleAdminActive,
        $EnablementRuleAdmin
    )
    Update-AzRoleManagementPolicy -Scope $Scope -Name $PolicyId -Rule $AllRules

    # ─── 4) SKIP OR CREATE ELIGIBILITY ────────────────────────────────────────────
    $allSchedules = Get-AzRoleEligibilityScheduleRequest `
        -Scope $AssignmentScope `
        -Filter "principalId eq '$PrincipalId'" `
        -ErrorAction SilentlyContinue

    $existing = $allSchedules | Where-Object {
        $_.RoleDefinitionId -eq $RoleDefinitionId -and
        $_.Scope            -eq $AssignmentScope
    }

    if ($existing) {
        Write-Host "Skipping—eligibility already exists for '$principalName' as '$roleName'"
        continue
    }

    # Create new eligibility schedule
    $params = @{
        Name                      = [Guid]::NewGuid().ToString()
        Scope                     = $AssignmentScope
        PrincipalId               = $PrincipalId
        RoleDefinitionId          = $RoleDefinitionId
        RequestType               = "AdminAssign"
        ScheduleInfoStartDateTime = $StartTime
        Duration                  = $entry.Duration
        Justification             = $entry.Justification
    }
    New-AzRoleEligibilityScheduleRequest @params
}
